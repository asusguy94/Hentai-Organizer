generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Attribute {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  videoOnly Boolean @default(false)
  starOnly  Boolean @default(false)

  stars     StarAttributes[]
  bookmarks BookmarkAttributes[]

  @@map("attribute")
}

model BookmarkAttributes {
  attributeID Int
  bookmarkID  Int

  attribute Attribute @relation(fields: [attributeID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  bookmark  Bookmark  @relation(fields: [bookmarkID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([attributeID, bookmarkID])
  @@map("bookmarkattributes")
}

model Bookmark {
  id         Int  @id @default(autoincrement())
  start      Int  @default(0)
  videoID    Int
  categoryID Int
  starID     Int?
  outfitID   Int?

  video      Video                @relation(fields: [videoID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category             @relation(fields: [categoryID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  star       Star?                @relation(fields: [starID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  outfit     Outfit?              @relation(fields: [outfitID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  attributes BookmarkAttributes[]

  @@unique([videoID, start])
  @@map("bookmark")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  bookmarks Bookmark[]

  @@map("category")
}

model Outfit {
  id   Int    @id @default(autoincrement())
  name String @unique

  bookmarks Bookmark[]

  @@map("outfit")
}

model Plays {
  id      Int      @id @default(autoincrement())
  time    DateTime @default(now()) @db.DateTime()
  videoID Int

  video Video @relation(fields: [videoID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("plays")
}

model StarAttributes {
  attributeID Int
  starID      Int

  star      Star      @relation(fields: [starID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attribute Attribute @relation(fields: [attributeID], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@id([attributeID, starID])
  @@map("starattributes")
}

model Star {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  image     String?
  haircolor String?
  breast    String?
  hairstyle String?
  starLink  String?

  attributes StarAttributes[]
  bookmarks  Bookmark[]
  videos     VideoStars[]

  @@map("star")
}

model VideoStars {
  starID  Int
  videoID Int

  star  Star  @relation(fields: [starID], references: [id], onDelete: Restrict, onUpdate: Cascade)
  video Video @relation(fields: [videoID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([starID, videoID])
  @@map("videostars")
}

model Video {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  episode        Int       @default(0)
  path           String    @unique
  franchise      String
  brand          String?
  noStar         Boolean   @default(false)
  height         Int       @default(0)
  duration       Int       @default(0)
  cen            Boolean   @default(true)
  date           DateTime  @default(now()) @db.Date
  date_published DateTime? @db.Date
  cover          String?

  bookmarks Bookmark[]
  stars     VideoStars[]
  plays     Plays[]

  @@map("video")
}
